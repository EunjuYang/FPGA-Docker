// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#ifndef PROTOBUF_device_2eproto__INCLUDED
#define PROTOBUF_device_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_device_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsdeviceImpl();
void InitDefaultsdevice();
void InitDefaultsdevice_listImpl();
void InitDefaultsdevice_list();
inline void InitDefaults() {
  InitDefaultsdevice();
  InitDefaultsdevice_list();
}
}  // namespace protobuf_device_2eproto
namespace device {
class device;
class deviceDefaultTypeInternal;
extern deviceDefaultTypeInternal _device_default_instance_;
class device_list;
class device_listDefaultTypeInternal;
extern device_listDefaultTypeInternal _device_list_default_instance_;
}  // namespace device
namespace device {

enum device_Status {
  device_Status_IDLE = 0,
  device_Status_USED = 1
};
bool device_Status_IsValid(int value);
const device_Status device_Status_Status_MIN = device_Status_IDLE;
const device_Status device_Status_Status_MAX = device_Status_USED;
const int device_Status_Status_ARRAYSIZE = device_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* device_Status_descriptor();
inline const ::std::string& device_Status_Name(device_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    device_Status_descriptor(), value);
}
inline bool device_Status_Parse(
    const ::std::string& name, device_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<device_Status>(
    device_Status_descriptor(), name, value);
}
// ===================================================================

class device : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device.device) */ {
 public:
  device();
  virtual ~device();

  device(const device& from);

  inline device& operator=(const device& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  device(device&& from) noexcept
    : device() {
    *this = ::std::move(from);
  }

  inline device& operator=(device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const device* internal_default_instance() {
    return reinterpret_cast<const device*>(
               &_device_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(device* other);
  friend void swap(device& a, device& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline device* New() const PROTOBUF_FINAL { return New(NULL); }

  device* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const device& from);
  void MergeFrom(const device& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(device* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef device_Status Status;
  static const Status IDLE =
    device_Status_IDLE;
  static const Status USED =
    device_Status_USED;
  static inline bool Status_IsValid(int value) {
    return device_Status_IsValid(value);
  }
  static const Status Status_MIN =
    device_Status_Status_MIN;
  static const Status Status_MAX =
    device_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    device_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return device_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return device_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return device_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string device_driver = 3;
  int device_driver_size() const;
  void clear_device_driver();
  static const int kDeviceDriverFieldNumber = 3;
  const ::std::string& device_driver(int index) const;
  ::std::string* mutable_device_driver(int index);
  void set_device_driver(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_device_driver(int index, ::std::string&& value);
  #endif
  void set_device_driver(int index, const char* value);
  void set_device_driver(int index, const char* value, size_t size);
  ::std::string* add_device_driver();
  void add_device_driver(const ::std::string& value);
  #if LANG_CXX11
  void add_device_driver(::std::string&& value);
  #endif
  void add_device_driver(const char* value);
  void add_device_driver(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& device_driver() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_device_driver();

  // repeated string library = 4;
  int library_size() const;
  void clear_library();
  static const int kLibraryFieldNumber = 4;
  const ::std::string& library(int index) const;
  ::std::string* mutable_library(int index);
  void set_library(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_library(int index, ::std::string&& value);
  #endif
  void set_library(int index, const char* value);
  void set_library(int index, const char* value, size_t size);
  ::std::string* add_library();
  void add_library(const ::std::string& value);
  #if LANG_CXX11
  void add_library(::std::string&& value);
  #endif
  void add_library(const char* value);
  void add_library(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& library() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_library();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string pci = 2;
  bool has_pci() const;
  void clear_pci();
  static const int kPciFieldNumber = 2;
  const ::std::string& pci() const;
  void set_pci(const ::std::string& value);
  #if LANG_CXX11
  void set_pci(::std::string&& value);
  #endif
  void set_pci(const char* value);
  void set_pci(const char* value, size_t size);
  ::std::string* mutable_pci();
  ::std::string* release_pci();
  void set_allocated_pci(::std::string* pci);

  // optional string type = 5;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // optional .device.device.Status status = 6 [default = IDLE];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 6;
  ::device::device_Status status() const;
  void set_status(::device::device_Status value);

  // @@protoc_insertion_point(class_scope:device.device)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pci();
  void clear_has_pci();
  void set_has_type();
  void clear_has_type();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> device_driver_;
  ::google::protobuf::RepeatedPtrField< ::std::string> library_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr pci_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  int status_;
  friend struct ::protobuf_device_2eproto::TableStruct;
  friend void ::protobuf_device_2eproto::InitDefaultsdeviceImpl();
};
// -------------------------------------------------------------------

class device_list : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:device.device_list) */ {
 public:
  device_list();
  virtual ~device_list();

  device_list(const device_list& from);

  inline device_list& operator=(const device_list& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  device_list(device_list&& from) noexcept
    : device_list() {
    *this = ::std::move(from);
  }

  inline device_list& operator=(device_list&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const device_list& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const device_list* internal_default_instance() {
    return reinterpret_cast<const device_list*>(
               &_device_list_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(device_list* other);
  friend void swap(device_list& a, device_list& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline device_list* New() const PROTOBUF_FINAL { return New(NULL); }

  device_list* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const device_list& from);
  void MergeFrom(const device_list& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(device_list* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .device.device devices = 1;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 1;
  const ::device::device& devices(int index) const;
  ::device::device* mutable_devices(int index);
  ::device::device* add_devices();
  ::google::protobuf::RepeatedPtrField< ::device::device >*
      mutable_devices();
  const ::google::protobuf::RepeatedPtrField< ::device::device >&
      devices() const;

  // @@protoc_insertion_point(class_scope:device.device_list)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::device::device > devices_;
  friend struct ::protobuf_device_2eproto::TableStruct;
  friend void ::protobuf_device_2eproto::InitDefaultsdevice_listImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// device

// required string name = 1;
inline bool device::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void device::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void device::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void device::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& device::name() const {
  // @@protoc_insertion_point(field_get:device.device.name)
  return name_.GetNoArena();
}
inline void device::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:device.device.name)
}
#if LANG_CXX11
inline void device::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:device.device.name)
}
#endif
inline void device::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:device.device.name)
}
inline void device::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:device.device.name)
}
inline ::std::string* device::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:device.device.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* device::release_name() {
  // @@protoc_insertion_point(field_release:device.device.name)
  clear_has_name();
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:device.device.name)
}

// optional string pci = 2;
inline bool device::has_pci() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void device::set_has_pci() {
  _has_bits_[0] |= 0x00000002u;
}
inline void device::clear_has_pci() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void device::clear_pci() {
  pci_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_pci();
}
inline const ::std::string& device::pci() const {
  // @@protoc_insertion_point(field_get:device.device.pci)
  return pci_.GetNoArena();
}
inline void device::set_pci(const ::std::string& value) {
  set_has_pci();
  pci_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:device.device.pci)
}
#if LANG_CXX11
inline void device::set_pci(::std::string&& value) {
  set_has_pci();
  pci_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:device.device.pci)
}
#endif
inline void device::set_pci(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_pci();
  pci_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:device.device.pci)
}
inline void device::set_pci(const char* value, size_t size) {
  set_has_pci();
  pci_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:device.device.pci)
}
inline ::std::string* device::mutable_pci() {
  set_has_pci();
  // @@protoc_insertion_point(field_mutable:device.device.pci)
  return pci_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* device::release_pci() {
  // @@protoc_insertion_point(field_release:device.device.pci)
  clear_has_pci();
  return pci_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void device::set_allocated_pci(::std::string* pci) {
  if (pci != NULL) {
    set_has_pci();
  } else {
    clear_has_pci();
  }
  pci_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), pci);
  // @@protoc_insertion_point(field_set_allocated:device.device.pci)
}

// repeated string device_driver = 3;
inline int device::device_driver_size() const {
  return device_driver_.size();
}
inline void device::clear_device_driver() {
  device_driver_.Clear();
}
inline const ::std::string& device::device_driver(int index) const {
  // @@protoc_insertion_point(field_get:device.device.device_driver)
  return device_driver_.Get(index);
}
inline ::std::string* device::mutable_device_driver(int index) {
  // @@protoc_insertion_point(field_mutable:device.device.device_driver)
  return device_driver_.Mutable(index);
}
inline void device::set_device_driver(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:device.device.device_driver)
  device_driver_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void device::set_device_driver(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:device.device.device_driver)
  device_driver_.Mutable(index)->assign(std::move(value));
}
#endif
inline void device::set_device_driver(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  device_driver_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:device.device.device_driver)
}
inline void device::set_device_driver(int index, const char* value, size_t size) {
  device_driver_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:device.device.device_driver)
}
inline ::std::string* device::add_device_driver() {
  // @@protoc_insertion_point(field_add_mutable:device.device.device_driver)
  return device_driver_.Add();
}
inline void device::add_device_driver(const ::std::string& value) {
  device_driver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:device.device.device_driver)
}
#if LANG_CXX11
inline void device::add_device_driver(::std::string&& value) {
  device_driver_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:device.device.device_driver)
}
#endif
inline void device::add_device_driver(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  device_driver_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:device.device.device_driver)
}
inline void device::add_device_driver(const char* value, size_t size) {
  device_driver_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:device.device.device_driver)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
device::device_driver() const {
  // @@protoc_insertion_point(field_list:device.device.device_driver)
  return device_driver_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
device::mutable_device_driver() {
  // @@protoc_insertion_point(field_mutable_list:device.device.device_driver)
  return &device_driver_;
}

// repeated string library = 4;
inline int device::library_size() const {
  return library_.size();
}
inline void device::clear_library() {
  library_.Clear();
}
inline const ::std::string& device::library(int index) const {
  // @@protoc_insertion_point(field_get:device.device.library)
  return library_.Get(index);
}
inline ::std::string* device::mutable_library(int index) {
  // @@protoc_insertion_point(field_mutable:device.device.library)
  return library_.Mutable(index);
}
inline void device::set_library(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:device.device.library)
  library_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void device::set_library(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:device.device.library)
  library_.Mutable(index)->assign(std::move(value));
}
#endif
inline void device::set_library(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  library_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:device.device.library)
}
inline void device::set_library(int index, const char* value, size_t size) {
  library_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:device.device.library)
}
inline ::std::string* device::add_library() {
  // @@protoc_insertion_point(field_add_mutable:device.device.library)
  return library_.Add();
}
inline void device::add_library(const ::std::string& value) {
  library_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:device.device.library)
}
#if LANG_CXX11
inline void device::add_library(::std::string&& value) {
  library_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:device.device.library)
}
#endif
inline void device::add_library(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  library_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:device.device.library)
}
inline void device::add_library(const char* value, size_t size) {
  library_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:device.device.library)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
device::library() const {
  // @@protoc_insertion_point(field_list:device.device.library)
  return library_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
device::mutable_library() {
  // @@protoc_insertion_point(field_mutable_list:device.device.library)
  return &library_;
}

// optional string type = 5;
inline bool device::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void device::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void device::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void device::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}
inline const ::std::string& device::type() const {
  // @@protoc_insertion_point(field_get:device.device.type)
  return type_.GetNoArena();
}
inline void device::set_type(const ::std::string& value) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:device.device.type)
}
#if LANG_CXX11
inline void device::set_type(::std::string&& value) {
  set_has_type();
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:device.device.type)
}
#endif
inline void device::set_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:device.device.type)
}
inline void device::set_type(const char* value, size_t size) {
  set_has_type();
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:device.device.type)
}
inline ::std::string* device::mutable_type() {
  set_has_type();
  // @@protoc_insertion_point(field_mutable:device.device.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* device::release_type() {
  // @@protoc_insertion_point(field_release:device.device.type)
  clear_has_type();
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void device::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    set_has_type();
  } else {
    clear_has_type();
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:device.device.type)
}

// optional .device.device.Status status = 6 [default = IDLE];
inline bool device::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void device::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void device::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void device::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::device::device_Status device::status() const {
  // @@protoc_insertion_point(field_get:device.device.status)
  return static_cast< ::device::device_Status >(status_);
}
inline void device::set_status(::device::device_Status value) {
  assert(::device::device_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:device.device.status)
}

// -------------------------------------------------------------------

// device_list

// repeated .device.device devices = 1;
inline int device_list::devices_size() const {
  return devices_.size();
}
inline void device_list::clear_devices() {
  devices_.Clear();
}
inline const ::device::device& device_list::devices(int index) const {
  // @@protoc_insertion_point(field_get:device.device_list.devices)
  return devices_.Get(index);
}
inline ::device::device* device_list::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:device.device_list.devices)
  return devices_.Mutable(index);
}
inline ::device::device* device_list::add_devices() {
  // @@protoc_insertion_point(field_add:device.device_list.devices)
  return devices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::device::device >*
device_list::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:device.device_list.devices)
  return &devices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::device::device >&
device_list::devices() const {
  // @@protoc_insertion_point(field_list:device.device_list.devices)
  return devices_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace device

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::device::device_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::device::device_Status>() {
  return ::device::device_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_device_2eproto__INCLUDED
