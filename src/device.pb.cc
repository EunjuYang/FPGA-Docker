// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: device.proto

#include "device.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace device {
class deviceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<device>
      _instance;
} _device_default_instance_;
class device_listDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<device_list>
      _instance;
} _device_list_default_instance_;
}  // namespace device
namespace protobuf_device_2eproto {
void InitDefaultsdeviceImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::device::_device_default_instance_;
    new (ptr) ::device::device();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::device::device::InitAsDefaultInstance();
}

void InitDefaultsdevice() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdeviceImpl);
}

void InitDefaultsdevice_listImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_device_2eproto::InitDefaultsdevice();
  {
    void* ptr = &::device::_device_list_default_instance_;
    new (ptr) ::device::device_list();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::device::device_list::InitAsDefaultInstance();
}

void InitDefaultsdevice_list() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsdevice_listImpl);
}

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device, pci_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device, device_driver_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device, library_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device, status_),
  0,
  1,
  ~0u,
  ~0u,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device_list, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device_list, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::device::device_list, devices_),
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 11, sizeof(::device::device)},
  { 17, 23, sizeof(::device::device_list)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::device::_device_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::device::_device_list_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "device.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014device.proto\022\006device\"\244\001\n\006device\022\014\n\004nam"
      "e\030\001 \002(\t\022\013\n\003pci\030\002 \001(\t\022\025\n\rdevice_driver\030\003 "
      "\003(\t\022\017\n\007library\030\004 \003(\t\022\014\n\004type\030\005 \001(\t\022+\n\006st"
      "atus\030\006 \001(\0162\025.device.device.Status:\004IDLE\""
      "\034\n\006Status\022\010\n\004IDLE\020\000\022\010\n\004USED\020\001\".\n\013device_"
      "list\022\037\n\007devices\030\001 \003(\0132\016.device.device"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 237);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "device.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_device_2eproto
namespace device {
const ::google::protobuf::EnumDescriptor* device_Status_descriptor() {
  protobuf_device_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_device_2eproto::file_level_enum_descriptors[0];
}
bool device_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const device_Status device::IDLE;
const device_Status device::USED;
const device_Status device::Status_MIN;
const device_Status device::Status_MAX;
const int device::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void device::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int device::kNameFieldNumber;
const int device::kPciFieldNumber;
const int device::kDeviceDriverFieldNumber;
const int device::kLibraryFieldNumber;
const int device::kTypeFieldNumber;
const int device::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

device::device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_device_2eproto::InitDefaultsdevice();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:device.device)
}
device::device(const device& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      device_driver_(from.device_driver_),
      library_(from.library_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  pci_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pci()) {
    pci_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pci_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_type()) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:device.device)
}

void device::SharedCtor() {
  _cached_size_ = 0;
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pci_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

device::~device() {
  // @@protoc_insertion_point(destructor:device.device)
  SharedDtor();
}

void device::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pci_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* device::descriptor() {
  ::protobuf_device_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_device_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const device& device::default_instance() {
  ::protobuf_device_2eproto::InitDefaultsdevice();
  return *internal_default_instance();
}

device* device::New(::google::protobuf::Arena* arena) const {
  device* n = new device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void device::Clear() {
// @@protoc_insertion_point(message_clear_start:device.device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  device_driver_.Clear();
  library_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!name_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*name_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!pci_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*pci_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(!type_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*type_.UnsafeRawStringPointer())->clear();
    }
  }
  status_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:device.device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device.device.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string pci = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pci()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pci().data(), static_cast<int>(this->pci().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device.device.pci");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string device_driver = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_device_driver()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_driver(this->device_driver_size() - 1).data(),
            static_cast<int>(this->device_driver(this->device_driver_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device.device.device_driver");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string library = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_library()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->library(this->library_size() - 1).data(),
            static_cast<int>(this->library(this->library_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device.device.library");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->type().data(), static_cast<int>(this->type().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device.device.type");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .device.device.Status status = 6 [default = IDLE];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::device::device_Status_IsValid(value)) {
            set_status(static_cast< ::device::device_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:device.device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:device.device)
  return false;
#undef DO_
}

void device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:device.device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string pci = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pci().data(), static_cast<int>(this->pci().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.pci");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->pci(), output);
  }

  // repeated string device_driver = 3;
  for (int i = 0, n = this->device_driver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_driver(i).data(), static_cast<int>(this->device_driver(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.device_driver");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->device_driver(i), output);
  }

  // repeated string library = 4;
  for (int i = 0, n = this->library_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->library(i).data(), static_cast<int>(this->library(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.library");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->library(i), output);
  }

  // optional string type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // optional .device.device.Status status = 6 [default = IDLE];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:device.device)
}

::google::protobuf::uint8* device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:device.device)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string pci = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pci().data(), static_cast<int>(this->pci().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.pci");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->pci(), target);
  }

  // repeated string device_driver = 3;
  for (int i = 0, n = this->device_driver_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_driver(i).data(), static_cast<int>(this->device_driver(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.device_driver");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->device_driver(i), target);
  }

  // repeated string library = 4;
  for (int i = 0, n = this->library_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->library(i).data(), static_cast<int>(this->library(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.library");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->library(i), target);
  }

  // optional string type = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->type().data(), static_cast<int>(this->type().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device.device.type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->type(), target);
  }

  // optional .device.device.Status status = 6 [default = IDLE];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->status(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.device)
  return target;
}

size_t device::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.device)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  // repeated string device_driver = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->device_driver_size());
  for (int i = 0, n = this->device_driver_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->device_driver(i));
  }

  // repeated string library = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->library_size());
  for (int i = 0, n = this->library_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->library(i));
  }

  if (_has_bits_[0 / 32] & 14u) {
    // optional string pci = 2;
    if (has_pci()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pci());
    }

    // optional string type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .device.device.Status status = 6 [default = IDLE];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.device)
  GOOGLE_DCHECK_NE(&from, this);
  const device* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.device)
    MergeFrom(*source);
  }
}

void device::MergeFrom(const device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.device)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  device_driver_.MergeFrom(from.device_driver_);
  library_.MergeFrom(from.library_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_pci();
      pci_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pci_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_type();
      type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device::CopyFrom(const device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void device::Swap(device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void device::InternalSwap(device* other) {
  using std::swap;
  device_driver_.InternalSwap(&other->device_driver_);
  library_.InternalSwap(&other->library_);
  name_.Swap(&other->name_);
  pci_.Swap(&other->pci_);
  type_.Swap(&other->type_);
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata device::GetMetadata() const {
  protobuf_device_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_device_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void device_list::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int device_list::kDevicesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

device_list::device_list()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_device_2eproto::InitDefaultsdevice_list();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:device.device_list)
}
device_list::device_list(const device_list& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      devices_(from.devices_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:device.device_list)
}

void device_list::SharedCtor() {
  _cached_size_ = 0;
}

device_list::~device_list() {
  // @@protoc_insertion_point(destructor:device.device_list)
  SharedDtor();
}

void device_list::SharedDtor() {
}

void device_list::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* device_list::descriptor() {
  ::protobuf_device_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_device_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const device_list& device_list::default_instance() {
  ::protobuf_device_2eproto::InitDefaultsdevice_list();
  return *internal_default_instance();
}

device_list* device_list::New(::google::protobuf::Arena* arena) const {
  device_list* n = new device_list;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void device_list::Clear() {
// @@protoc_insertion_point(message_clear_start:device.device_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devices_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool device_list::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:device.device_list)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .device.device devices = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_devices()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:device.device_list)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:device.device_list)
  return false;
#undef DO_
}

void device_list::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:device.device_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .device.device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devices(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:device.device_list)
}

::google::protobuf::uint8* device_list::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:device.device_list)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .device.device devices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->devices_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->devices(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:device.device_list)
  return target;
}

size_t device_list::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:device.device_list)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .device.device devices = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->devices_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->devices(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void device_list::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:device.device_list)
  GOOGLE_DCHECK_NE(&from, this);
  const device_list* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const device_list>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:device.device_list)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:device.device_list)
    MergeFrom(*source);
  }
}

void device_list::MergeFrom(const device_list& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:device.device_list)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devices_.MergeFrom(from.devices_);
}

void device_list::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:device.device_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void device_list::CopyFrom(const device_list& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:device.device_list)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool device_list::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->devices())) return false;
  return true;
}

void device_list::Swap(device_list* other) {
  if (other == this) return;
  InternalSwap(other);
}
void device_list::InternalSwap(device_list* other) {
  using std::swap;
  devices_.InternalSwap(&other->devices_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata device_list::GetMetadata() const {
  protobuf_device_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_device_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace device

// @@protoc_insertion_point(global_scope)
